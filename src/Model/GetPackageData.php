<?php
/**
 * GetPackageData
 *
 * PHP version 8.1
 *
 * @package  kruegge82\shipstage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipstage API
 *
 * Wenn Sie die API verwenden mÃ¶chten, wenden Sie sich bitte an den Support, um ein Authentifizierungstoken zu erhalten.
 *
 * The version of the OpenAPI document: 2.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\shipstage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use kruegge82\shipstage\ObjectSerializer;

/**
 * GetPackageData Class Doc Comment
 *
 * @package  kruegge82\shipstage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetPackageData implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetPackageData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'package_id' => 'int',
        'number' => 'string',
        'duplicate_ids' => 'int[]',
        'created' => 'string',
        'is_paid' => 'bool',
        'return_data' => '\kruegge82\shipstage\Model\ReturnPackageData',
        'error_message' => 'string',
        'error_timestamp' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'package_id' => null,
        'number' => null,
        'duplicate_ids' => null,
        'created' => null,
        'is_paid' => null,
        'return_data' => null,
        'error_message' => null,
        'error_timestamp' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'package_id' => false,
        'number' => false,
        'duplicate_ids' => false,
        'created' => false,
        'is_paid' => false,
        'return_data' => false,
        'error_message' => false,
        'error_timestamp' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'package_id' => 'package_id',
        'number' => 'number',
        'duplicate_ids' => 'duplicate_ids',
        'created' => 'created',
        'is_paid' => 'is_paid',
        'return_data' => 'return_data',
        'error_message' => 'error_message',
        'error_timestamp' => 'error_timestamp',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'package_id' => 'setPackageId',
        'number' => 'setNumber',
        'duplicate_ids' => 'setDuplicateIds',
        'created' => 'setCreated',
        'is_paid' => 'setIsPaid',
        'return_data' => 'setReturnData',
        'error_message' => 'setErrorMessage',
        'error_timestamp' => 'setErrorTimestamp',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'package_id' => 'getPackageId',
        'number' => 'getNumber',
        'duplicate_ids' => 'getDuplicateIds',
        'created' => 'getCreated',
        'is_paid' => 'getIsPaid',
        'return_data' => 'getReturnData',
        'error_message' => 'getErrorMessage',
        'error_timestamp' => 'getErrorTimestamp',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array|null $data = null)
    {
        $this->setIfExists('package_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('duplicate_ids', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('is_paid', $data ?? [], null);
        $this->setIfExists('return_data', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('error_timestamp', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['package_id'] === null) {
            $invalidProperties[] = "'package_id' can't be null";
        }
        if ($this->container['duplicate_ids'] === null) {
            $invalidProperties[] = "'duplicate_ids' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets package_id
     *
     * @return int
     */
    public function getPackageId(): int
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param int $package_id package_id
     *
     * @return $this
     */
    public function setPackageId(int $package_id): static
    {
        if (is_null($package_id)) {
            throw new InvalidArgumentException('non-nullable package_id cannot be null');
        }
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return $this
     */
    public function setNumber(?string $number): static
    {
        if (is_null($number)) {
            throw new InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets duplicate_ids
     *
     * @return int[]
     */
    public function getDuplicateIds(): array
    {
        return $this->container['duplicate_ids'];
    }

    /**
     * Sets duplicate_ids
     *
     * @param int[] $duplicate_ids duplicate_ids
     *
     * @return $this
     */
    public function setDuplicateIds(array $duplicate_ids): static
    {
        if (is_null($duplicate_ids)) {
            throw new InvalidArgumentException('non-nullable duplicate_ids cannot be null');
        }
        $this->container['duplicate_ids'] = $duplicate_ids;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated(): string
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated(string $created): static
    {
        if (is_null($created)) {
            throw new InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool|null
     */
    public function getIsPaid(): ?bool
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool|null $is_paid is_paid
     *
     * @return $this
     */
    public function setIsPaid(?bool $is_paid): static
    {
        if (is_null($is_paid)) {
            throw new InvalidArgumentException('non-nullable is_paid cannot be null');
        }
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets return_data
     *
     * @return \kruegge82\shipstage\Model\ReturnPackageData|null
     */
    public function getReturnData(): ?\kruegge82\shipstage\Model\ReturnPackageData
    {
        return $this->container['return_data'];
    }

    /**
     * Sets return_data
     *
     * @param \kruegge82\shipstage\Model\ReturnPackageData|null $return_data return_data
     *
     * @return $this
     */
    public function setReturnData(?\kruegge82\shipstage\Model\ReturnPackageData $return_data): static
    {
        if (is_null($return_data)) {
            throw new InvalidArgumentException('non-nullable return_data cannot be null');
        }
        $this->container['return_data'] = $return_data;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage(): ?string
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return $this
     */
    public function setErrorMessage(?string $error_message): static
    {
        if (is_null($error_message)) {
            throw new InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets error_timestamp
     *
     * @return string|null
     */
    public function getErrorTimestamp(): ?string
    {
        return $this->container['error_timestamp'];
    }

    /**
     * Sets error_timestamp
     *
     * @param string|null $error_timestamp error_timestamp
     *
     * @return $this
     */
    public function setErrorTimestamp(?string $error_timestamp): static
    {
        if (is_null($error_timestamp)) {
            throw new InvalidArgumentException('non-nullable error_timestamp cannot be null');
        }
        $this->container['error_timestamp'] = $error_timestamp;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus(): string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus(string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


