<?php
/**
 * UPSDataModel
 *
 * PHP version 8.1
 *
 * @package  kruegge82\shipstage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipstage API
 *
 * Wenn Sie die API verwenden mÃ¶chten, wenden Sie sich bitte an den Support, um ein Authentifizierungstoken zu erhalten.
 *
 * The version of the OpenAPI document: 2.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace kruegge82\shipstage\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use kruegge82\shipstage\ObjectSerializer;

/**
 * UPSDataModel Class Doc Comment
 *
 * @package  kruegge82\shipstage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class UPSDataModel implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'UPSDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'packages' => '\kruegge82\shipstage\Model\UPSPackage[]',
        'from_country' => 'string',
        'from_contact_name' => 'string',
        'from_company_name' => 'string',
        'from_address' => 'string',
        'from_additional_address' => 'string',
        'from_state' => '\kruegge82\shipstage\Model\State',
        'from_postal_code' => 'string',
        'from_city' => 'string',
        'from_phone' => 'string',
        'from_email' => 'string',
        'to_country' => 'string',
        'to_contact_name' => 'string',
        'to_company_name' => 'string',
        'to_address' => 'string',
        'to_additional_address' => 'string',
        'to_state' => '\kruegge82\shipstage\Model\State',
        'to_postal_code' => 'string',
        'to_city' => 'string',
        'to_phone' => 'string',
        'to_email' => 'string',
        'service_code' => 'string',
        'autopay' => 'bool',
        'save_address' => 'bool',
        'shipment_type' => 'string',
        'invoice_number' => 'string',
        'terms_of_shipment' => '\kruegge82\shipstage\Model\TermsOfShipment',
        'insurance_amount' => 'float',
        'insurance_content' => 'string',
        'insurance_used_item' => 'bool',
        'cod_amount' => 'float',
        'cod_reason' => 'string',
        'is_b2c' => 'bool',
        'is_saturday_delivery' => 'bool',
        'carbon_neutral' => 'bool',
        'return_service' => 'bool',
        'reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'packages' => null,
        'from_country' => null,
        'from_contact_name' => null,
        'from_company_name' => null,
        'from_address' => null,
        'from_additional_address' => null,
        'from_state' => null,
        'from_postal_code' => null,
        'from_city' => null,
        'from_phone' => null,
        'from_email' => null,
        'to_country' => null,
        'to_contact_name' => null,
        'to_company_name' => null,
        'to_address' => null,
        'to_additional_address' => null,
        'to_state' => null,
        'to_postal_code' => null,
        'to_city' => null,
        'to_phone' => null,
        'to_email' => null,
        'service_code' => null,
        'autopay' => null,
        'save_address' => null,
        'shipment_type' => null,
        'invoice_number' => null,
        'terms_of_shipment' => null,
        'insurance_amount' => null,
        'insurance_content' => null,
        'insurance_used_item' => null,
        'cod_amount' => null,
        'cod_reason' => null,
        'is_b2c' => null,
        'is_saturday_delivery' => null,
        'carbon_neutral' => null,
        'return_service' => null,
        'reference' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'packages' => false,
        'from_country' => false,
        'from_contact_name' => false,
        'from_company_name' => false,
        'from_address' => false,
        'from_additional_address' => false,
        'from_state' => false,
        'from_postal_code' => false,
        'from_city' => false,
        'from_phone' => false,
        'from_email' => false,
        'to_country' => false,
        'to_contact_name' => false,
        'to_company_name' => false,
        'to_address' => false,
        'to_additional_address' => false,
        'to_state' => false,
        'to_postal_code' => false,
        'to_city' => false,
        'to_phone' => false,
        'to_email' => false,
        'service_code' => false,
        'autopay' => false,
        'save_address' => false,
        'shipment_type' => false,
        'invoice_number' => false,
        'terms_of_shipment' => false,
        'insurance_amount' => false,
        'insurance_content' => false,
        'insurance_used_item' => false,
        'cod_amount' => false,
        'cod_reason' => false,
        'is_b2c' => false,
        'is_saturday_delivery' => false,
        'carbon_neutral' => false,
        'return_service' => false,
        'reference' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'packages' => 'packages',
        'from_country' => 'from_country',
        'from_contact_name' => 'from_contact_name',
        'from_company_name' => 'from_company_name',
        'from_address' => 'from_address',
        'from_additional_address' => 'from_additional_address',
        'from_state' => 'from_state',
        'from_postal_code' => 'from_postal_code',
        'from_city' => 'from_city',
        'from_phone' => 'from_phone',
        'from_email' => 'from_email',
        'to_country' => 'to_country',
        'to_contact_name' => 'to_contact_name',
        'to_company_name' => 'to_company_name',
        'to_address' => 'to_address',
        'to_additional_address' => 'to_additional_address',
        'to_state' => 'to_state',
        'to_postal_code' => 'to_postal_code',
        'to_city' => 'to_city',
        'to_phone' => 'to_phone',
        'to_email' => 'to_email',
        'service_code' => 'service_code',
        'autopay' => 'autopay',
        'save_address' => 'save_address',
        'shipment_type' => 'shipment_type',
        'invoice_number' => 'invoice_number',
        'terms_of_shipment' => 'terms_of_shipment',
        'insurance_amount' => 'insurance_amount',
        'insurance_content' => 'insurance_content',
        'insurance_used_item' => 'insurance_used_item',
        'cod_amount' => 'cod_amount',
        'cod_reason' => 'cod_reason',
        'is_b2c' => 'is_b2c',
        'is_saturday_delivery' => 'is_saturday_delivery',
        'carbon_neutral' => 'carbon_neutral',
        'return_service' => 'return_service',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'packages' => 'setPackages',
        'from_country' => 'setFromCountry',
        'from_contact_name' => 'setFromContactName',
        'from_company_name' => 'setFromCompanyName',
        'from_address' => 'setFromAddress',
        'from_additional_address' => 'setFromAdditionalAddress',
        'from_state' => 'setFromState',
        'from_postal_code' => 'setFromPostalCode',
        'from_city' => 'setFromCity',
        'from_phone' => 'setFromPhone',
        'from_email' => 'setFromEmail',
        'to_country' => 'setToCountry',
        'to_contact_name' => 'setToContactName',
        'to_company_name' => 'setToCompanyName',
        'to_address' => 'setToAddress',
        'to_additional_address' => 'setToAdditionalAddress',
        'to_state' => 'setToState',
        'to_postal_code' => 'setToPostalCode',
        'to_city' => 'setToCity',
        'to_phone' => 'setToPhone',
        'to_email' => 'setToEmail',
        'service_code' => 'setServiceCode',
        'autopay' => 'setAutopay',
        'save_address' => 'setSaveAddress',
        'shipment_type' => 'setShipmentType',
        'invoice_number' => 'setInvoiceNumber',
        'terms_of_shipment' => 'setTermsOfShipment',
        'insurance_amount' => 'setInsuranceAmount',
        'insurance_content' => 'setInsuranceContent',
        'insurance_used_item' => 'setInsuranceUsedItem',
        'cod_amount' => 'setCodAmount',
        'cod_reason' => 'setCodReason',
        'is_b2c' => 'setIsB2c',
        'is_saturday_delivery' => 'setIsSaturdayDelivery',
        'carbon_neutral' => 'setCarbonNeutral',
        'return_service' => 'setReturnService',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'packages' => 'getPackages',
        'from_country' => 'getFromCountry',
        'from_contact_name' => 'getFromContactName',
        'from_company_name' => 'getFromCompanyName',
        'from_address' => 'getFromAddress',
        'from_additional_address' => 'getFromAdditionalAddress',
        'from_state' => 'getFromState',
        'from_postal_code' => 'getFromPostalCode',
        'from_city' => 'getFromCity',
        'from_phone' => 'getFromPhone',
        'from_email' => 'getFromEmail',
        'to_country' => 'getToCountry',
        'to_contact_name' => 'getToContactName',
        'to_company_name' => 'getToCompanyName',
        'to_address' => 'getToAddress',
        'to_additional_address' => 'getToAdditionalAddress',
        'to_state' => 'getToState',
        'to_postal_code' => 'getToPostalCode',
        'to_city' => 'getToCity',
        'to_phone' => 'getToPhone',
        'to_email' => 'getToEmail',
        'service_code' => 'getServiceCode',
        'autopay' => 'getAutopay',
        'save_address' => 'getSaveAddress',
        'shipment_type' => 'getShipmentType',
        'invoice_number' => 'getInvoiceNumber',
        'terms_of_shipment' => 'getTermsOfShipment',
        'insurance_amount' => 'getInsuranceAmount',
        'insurance_content' => 'getInsuranceContent',
        'insurance_used_item' => 'getInsuranceUsedItem',
        'cod_amount' => 'getCodAmount',
        'cod_reason' => 'getCodReason',
        'is_b2c' => 'getIsB2c',
        'is_saturday_delivery' => 'getIsSaturdayDelivery',
        'carbon_neutral' => 'getCarbonNeutral',
        'return_service' => 'getReturnService',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const FROM_COUNTRY_AF = 'AF';
    public const FROM_COUNTRY_AX = 'AX';
    public const FROM_COUNTRY_AL = 'AL';
    public const FROM_COUNTRY_DZ = 'DZ';
    public const FROM_COUNTRY__AS = 'AS';
    public const FROM_COUNTRY_AD = 'AD';
    public const FROM_COUNTRY_AO = 'AO';
    public const FROM_COUNTRY_AI = 'AI';
    public const FROM_COUNTRY_AQ = 'AQ';
    public const FROM_COUNTRY_AG = 'AG';
    public const FROM_COUNTRY_AR = 'AR';
    public const FROM_COUNTRY_AM = 'AM';
    public const FROM_COUNTRY_AW = 'AW';
    public const FROM_COUNTRY_AU = 'AU';
    public const FROM_COUNTRY_AT = 'AT';
    public const FROM_COUNTRY_AZ = 'AZ';
    public const FROM_COUNTRY_BS = 'BS';
    public const FROM_COUNTRY_BH = 'BH';
    public const FROM_COUNTRY_BD = 'BD';
    public const FROM_COUNTRY_BB = 'BB';
    public const FROM_COUNTRY_AG2 = 'AG';
    public const FROM_COUNTRY_BY = 'BY';
    public const FROM_COUNTRY_BE = 'BE';
    public const FROM_COUNTRY_BZ = 'BZ';
    public const FROM_COUNTRY_BJ = 'BJ';
    public const FROM_COUNTRY_BM = 'BM';
    public const FROM_COUNTRY_BT = 'BT';
    public const FROM_COUNTRY_BO = 'BO';
    public const FROM_COUNTRY_BQ = 'BQ';
    public const FROM_COUNTRY_BQ2 = 'BQ';
    public const FROM_COUNTRY_BA = 'BA';
    public const FROM_COUNTRY_BW = 'BW';
    public const FROM_COUNTRY_BV = 'BV';
    public const FROM_COUNTRY_BR = 'BR';
    public const FROM_COUNTRY_IO = 'IO';
    public const FROM_COUNTRY_BN = 'BN';
    public const FROM_COUNTRY_BG = 'BG';
    public const FROM_COUNTRY_BF = 'BF';
    public const FROM_COUNTRY_BI = 'BI';
    public const FROM_COUNTRY_CV = 'CV';
    public const FROM_COUNTRY_KH = 'KH';
    public const FROM_COUNTRY_CM = 'CM';
    public const FROM_COUNTRY_CA = 'CA';
    public const FROM_COUNTRY_KY = 'KY';
    public const FROM_COUNTRY_CF = 'CF';
    public const FROM_COUNTRY_TD = 'TD';
    public const FROM_COUNTRY_CL = 'CL';
    public const FROM_COUNTRY_CN = 'CN';
    public const FROM_COUNTRY_CX = 'CX';
    public const FROM_COUNTRY_FM = 'FM';
    public const FROM_COUNTRY_CC = 'CC';
    public const FROM_COUNTRY_CO = 'CO';
    public const FROM_COUNTRY_KM = 'KM';
    public const FROM_COUNTRY_CG = 'CG';
    public const FROM_COUNTRY_CD = 'CD';
    public const FROM_COUNTRY_CK = 'CK';
    public const FROM_COUNTRY_CR = 'CR';
    public const FROM_COUNTRY_CI = 'CI';
    public const FROM_COUNTRY_HR = 'HR';
    public const FROM_COUNTRY_CU = 'CU';
    public const FROM_COUNTRY_CW = 'CW';
    public const FROM_COUNTRY_CY = 'CY';
    public const FROM_COUNTRY_CZ = 'CZ';
    public const FROM_COUNTRY_DK = 'DK';
    public const FROM_COUNTRY_DJ = 'DJ';
    public const FROM_COUNTRY_DM = 'DM';
    public const FROM_COUNTRY__DO = 'DO';
    public const FROM_COUNTRY_EC = 'EC';
    public const FROM_COUNTRY_EG = 'EG';
    public const FROM_COUNTRY_SV = 'SV';
    public const FROM_COUNTRY_GB = 'GB';
    public const FROM_COUNTRY_GQ = 'GQ';
    public const FROM_COUNTRY_ER = 'ER';
    public const FROM_COUNTRY_EE = 'EE';
    public const FROM_COUNTRY_ET = 'ET';
    public const FROM_COUNTRY_FK = 'FK';
    public const FROM_COUNTRY_FO = 'FO';
    public const FROM_COUNTRY_FJ = 'FJ';
    public const FROM_COUNTRY_FI = 'FI';
    public const FROM_COUNTRY_FR = 'FR';
    public const FROM_COUNTRY_GF = 'GF';
    public const FROM_COUNTRY_PF = 'PF';
    public const FROM_COUNTRY_TF = 'TF';
    public const FROM_COUNTRY_GA = 'GA';
    public const FROM_COUNTRY_GM = 'GM';
    public const FROM_COUNTRY_GE = 'GE';
    public const FROM_COUNTRY_DE = 'DE';
    public const FROM_COUNTRY_GH = 'GH';
    public const FROM_COUNTRY_GI = 'GI';
    public const FROM_COUNTRY_GR = 'GR';
    public const FROM_COUNTRY_GL = 'GL';
    public const FROM_COUNTRY_GD = 'GD';
    public const FROM_COUNTRY_GP = 'GP';
    public const FROM_COUNTRY_GU = 'GU';
    public const FROM_COUNTRY_GT = 'GT';
    public const FROM_COUNTRY_GN = 'GN';
    public const FROM_COUNTRY_GW = 'GW';
    public const FROM_COUNTRY_GY = 'GY';
    public const FROM_COUNTRY_HT = 'HT';
    public const FROM_COUNTRY_HM = 'HM';
    public const FROM_COUNTRY_HN = 'HN';
    public const FROM_COUNTRY_HK = 'HK';
    public const FROM_COUNTRY_HU = 'HU';
    public const FROM_COUNTRY_IS = 'IS';
    public const FROM_COUNTRY_IN = 'IN';
    public const FROM_COUNTRY_ID = 'ID';
    public const FROM_COUNTRY_IR = 'IR';
    public const FROM_COUNTRY_IQ = 'IQ';
    public const FROM_COUNTRY_IE = 'IE';
    public const FROM_COUNTRY_IM = 'IM';
    public const FROM_COUNTRY_IL = 'IL';
    public const FROM_COUNTRY_IT = 'IT';
    public const FROM_COUNTRY_JM = 'JM';
    public const FROM_COUNTRY_JP = 'JP';
    public const FROM_COUNTRY_JO = 'JO';
    public const FROM_COUNTRY_KZ = 'KZ';
    public const FROM_COUNTRY_KE = 'KE';
    public const FROM_COUNTRY_KI = 'KI';
    public const FROM_COUNTRY_KP = 'KP';
    public const FROM_COUNTRY_KR = 'KR';
    public const FROM_COUNTRY_RS = 'RS';
    public const FROM_COUNTRY_FM2 = 'FM';
    public const FROM_COUNTRY_KW = 'KW';
    public const FROM_COUNTRY_KG = 'KG';
    public const FROM_COUNTRY_LA = 'LA';
    public const FROM_COUNTRY_LV = 'LV';
    public const FROM_COUNTRY_LB = 'LB';
    public const FROM_COUNTRY_LS = 'LS';
    public const FROM_COUNTRY_LR = 'LR';
    public const FROM_COUNTRY_LY = 'LY';
    public const FROM_COUNTRY_LI = 'LI';
    public const FROM_COUNTRY_LT = 'LT';
    public const FROM_COUNTRY_LU = 'LU';
    public const FROM_COUNTRY_MO = 'MO';
    public const FROM_COUNTRY_MG = 'MG';
    public const FROM_COUNTRY_MW = 'MW';
    public const FROM_COUNTRY_MY = 'MY';
    public const FROM_COUNTRY_MV = 'MV';
    public const FROM_COUNTRY_ML = 'ML';
    public const FROM_COUNTRY_MT = 'MT';
    public const FROM_COUNTRY_MH = 'MH';
    public const FROM_COUNTRY_MQ = 'MQ';
    public const FROM_COUNTRY_MR = 'MR';
    public const FROM_COUNTRY_MU = 'MU';
    public const FROM_COUNTRY_YT = 'YT';
    public const FROM_COUNTRY_MX = 'MX';
    public const FROM_COUNTRY_FM3 = 'FM';
    public const FROM_COUNTRY_MD = 'MD';
    public const FROM_COUNTRY_MC = 'MC';
    public const FROM_COUNTRY_MN = 'MN';
    public const FROM_COUNTRY_ME = 'ME';
    public const FROM_COUNTRY_MS = 'MS';
    public const FROM_COUNTRY_MA = 'MA';
    public const FROM_COUNTRY_MZ = 'MZ';
    public const FROM_COUNTRY_MM = 'MM';
    public const FROM_COUNTRY_NA = 'NA';
    public const FROM_COUNTRY_NR = 'NR';
    public const FROM_COUNTRY_NP = 'NP';
    public const FROM_COUNTRY_NL = 'NL';
    public const FROM_COUNTRY_KN = 'KN';
    public const FROM_COUNTRY_NC = 'NC';
    public const FROM_COUNTRY_NZ = 'NZ';
    public const FROM_COUNTRY_NI = 'NI';
    public const FROM_COUNTRY_NE = 'NE';
    public const FROM_COUNTRY_NG = 'NG';
    public const FROM_COUNTRY_NU = 'NU';
    public const FROM_COUNTRY_MK = 'MK';
    public const FROM_COUNTRY_NF = 'NF';
    public const FROM_COUNTRY_MP = 'MP';
    public const FROM_COUNTRY_NO = 'NO';
    public const FROM_COUNTRY_OM = 'OM';
    public const FROM_COUNTRY_PK = 'PK';
    public const FROM_COUNTRY_PW = 'PW';
    public const FROM_COUNTRY_PS = 'PS';
    public const FROM_COUNTRY_PA = 'PA';
    public const FROM_COUNTRY_PG = 'PG';
    public const FROM_COUNTRY_PY = 'PY';
    public const FROM_COUNTRY_PE = 'PE';
    public const FROM_COUNTRY_PH = 'PH';
    public const FROM_COUNTRY_PN = 'PN';
    public const FROM_COUNTRY_FM4 = 'FM';
    public const FROM_COUNTRY_PL = 'PL';
    public const FROM_COUNTRY_PT = 'PT';
    public const FROM_COUNTRY_PR = 'PR';
    public const FROM_COUNTRY_QA = 'QA';
    public const FROM_COUNTRY_RE = 'RE';
    public const FROM_COUNTRY_RO = 'RO';
    public const FROM_COUNTRY_RU = 'RU';
    public const FROM_COUNTRY_RW = 'RW';
    public const FROM_COUNTRY_BQ3 = 'BQ';
    public const FROM_COUNTRY_BL = 'BL';
    public const FROM_COUNTRY_BQ4 = 'BQ';
    public const FROM_COUNTRY_SH = 'SH';
    public const FROM_COUNTRY_KN2 = 'KN';
    public const FROM_COUNTRY_KN3 = 'KN';
    public const FROM_COUNTRY_LC = 'LC';
    public const FROM_COUNTRY_SX = 'SX';
    public const FROM_COUNTRY_MF = 'MF';
    public const FROM_COUNTRY_PM = 'PM';
    public const FROM_COUNTRY_VC = 'VC';
    public const FROM_COUNTRY_WS = 'WS';
    public const FROM_COUNTRY_SM = 'SM';
    public const FROM_COUNTRY_ST = 'ST';
    public const FROM_COUNTRY_SA = 'SA';
    public const FROM_COUNTRY_GB2 = 'GB';
    public const FROM_COUNTRY_SN = 'SN';
    public const FROM_COUNTRY_RS2 = 'RS';
    public const FROM_COUNTRY_SC = 'SC';
    public const FROM_COUNTRY_SL = 'SL';
    public const FROM_COUNTRY_SG = 'SG';
    public const FROM_COUNTRY_SK = 'SK';
    public const FROM_COUNTRY_SI = 'SI';
    public const FROM_COUNTRY_SB = 'SB';
    public const FROM_COUNTRY_SO = 'SO';
    public const FROM_COUNTRY_ZA = 'ZA';
    public const FROM_COUNTRY_GS = 'GS';
    public const FROM_COUNTRY_SS = 'SS';
    public const FROM_COUNTRY_ES = 'ES';
    public const FROM_COUNTRY_LK = 'LK';
    public const FROM_COUNTRY_SD = 'SD';
    public const FROM_COUNTRY_SR = 'SR';
    public const FROM_COUNTRY_SJ = 'SJ';
    public const FROM_COUNTRY_SZ = 'SZ';
    public const FROM_COUNTRY_SE = 'SE';
    public const FROM_COUNTRY_CH = 'CH';
    public const FROM_COUNTRY_SY = 'SY';
    public const FROM_COUNTRY_TW = 'TW';
    public const FROM_COUNTRY_TJ = 'TJ';
    public const FROM_COUNTRY_TZ = 'TZ';
    public const FROM_COUNTRY_TH = 'TH';
    public const FROM_COUNTRY_TL = 'TL';
    public const FROM_COUNTRY_TG = 'TG';
    public const FROM_COUNTRY_TK = 'TK';
    public const FROM_COUNTRY_TO = 'TO';
    public const FROM_COUNTRY_TT = 'TT';
    public const FROM_COUNTRY_TN = 'TN';
    public const FROM_COUNTRY_TR = 'TR';
    public const FROM_COUNTRY_TM = 'TM';
    public const FROM_COUNTRY_TC = 'TC';
    public const FROM_COUNTRY_TV = 'TV';
    public const FROM_COUNTRY_UG = 'UG';
    public const FROM_COUNTRY_UA = 'UA';
    public const FROM_COUNTRY_AE = 'AE';
    public const FROM_COUNTRY_US = 'US';
    public const FROM_COUNTRY_UM = 'UM';
    public const FROM_COUNTRY_UY = 'UY';
    public const FROM_COUNTRY_UZ = 'UZ';
    public const FROM_COUNTRY_VU = 'VU';
    public const FROM_COUNTRY_VA = 'VA';
    public const FROM_COUNTRY_VE = 'VE';
    public const FROM_COUNTRY_VN = 'VN';
    public const FROM_COUNTRY_VG = 'VG';
    public const FROM_COUNTRY_VI = 'VI';
    public const FROM_COUNTRY_GB3 = 'GB';
    public const FROM_COUNTRY_WF = 'WF';
    public const FROM_COUNTRY_EH = 'EH';
    public const FROM_COUNTRY_FM5 = 'FM';
    public const FROM_COUNTRY_YE = 'YE';
    public const FROM_COUNTRY_ZM = 'ZM';
    public const FROM_COUNTRY_ZW = 'ZW';
    public const TO_COUNTRY_AF = 'AF';
    public const TO_COUNTRY_AX = 'AX';
    public const TO_COUNTRY_AL = 'AL';
    public const TO_COUNTRY_DZ = 'DZ';
    public const TO_COUNTRY__AS = 'AS';
    public const TO_COUNTRY_AD = 'AD';
    public const TO_COUNTRY_AO = 'AO';
    public const TO_COUNTRY_AI = 'AI';
    public const TO_COUNTRY_AQ = 'AQ';
    public const TO_COUNTRY_AG = 'AG';
    public const TO_COUNTRY_AR = 'AR';
    public const TO_COUNTRY_AM = 'AM';
    public const TO_COUNTRY_AW = 'AW';
    public const TO_COUNTRY_AU = 'AU';
    public const TO_COUNTRY_AT = 'AT';
    public const TO_COUNTRY_AZ = 'AZ';
    public const TO_COUNTRY_BS = 'BS';
    public const TO_COUNTRY_BH = 'BH';
    public const TO_COUNTRY_BD = 'BD';
    public const TO_COUNTRY_BB = 'BB';
    public const TO_COUNTRY_AG2 = 'AG';
    public const TO_COUNTRY_BY = 'BY';
    public const TO_COUNTRY_BE = 'BE';
    public const TO_COUNTRY_BZ = 'BZ';
    public const TO_COUNTRY_BJ = 'BJ';
    public const TO_COUNTRY_BM = 'BM';
    public const TO_COUNTRY_BT = 'BT';
    public const TO_COUNTRY_BO = 'BO';
    public const TO_COUNTRY_BQ = 'BQ';
    public const TO_COUNTRY_BQ2 = 'BQ';
    public const TO_COUNTRY_BA = 'BA';
    public const TO_COUNTRY_BW = 'BW';
    public const TO_COUNTRY_BV = 'BV';
    public const TO_COUNTRY_BR = 'BR';
    public const TO_COUNTRY_IO = 'IO';
    public const TO_COUNTRY_BN = 'BN';
    public const TO_COUNTRY_BG = 'BG';
    public const TO_COUNTRY_BF = 'BF';
    public const TO_COUNTRY_BI = 'BI';
    public const TO_COUNTRY_CV = 'CV';
    public const TO_COUNTRY_KH = 'KH';
    public const TO_COUNTRY_CM = 'CM';
    public const TO_COUNTRY_CA = 'CA';
    public const TO_COUNTRY_KY = 'KY';
    public const TO_COUNTRY_CF = 'CF';
    public const TO_COUNTRY_TD = 'TD';
    public const TO_COUNTRY_CL = 'CL';
    public const TO_COUNTRY_CN = 'CN';
    public const TO_COUNTRY_CX = 'CX';
    public const TO_COUNTRY_FM = 'FM';
    public const TO_COUNTRY_CC = 'CC';
    public const TO_COUNTRY_CO = 'CO';
    public const TO_COUNTRY_KM = 'KM';
    public const TO_COUNTRY_CG = 'CG';
    public const TO_COUNTRY_CD = 'CD';
    public const TO_COUNTRY_CK = 'CK';
    public const TO_COUNTRY_CR = 'CR';
    public const TO_COUNTRY_CI = 'CI';
    public const TO_COUNTRY_HR = 'HR';
    public const TO_COUNTRY_CU = 'CU';
    public const TO_COUNTRY_CW = 'CW';
    public const TO_COUNTRY_CY = 'CY';
    public const TO_COUNTRY_CZ = 'CZ';
    public const TO_COUNTRY_DK = 'DK';
    public const TO_COUNTRY_DJ = 'DJ';
    public const TO_COUNTRY_DM = 'DM';
    public const TO_COUNTRY__DO = 'DO';
    public const TO_COUNTRY_EC = 'EC';
    public const TO_COUNTRY_EG = 'EG';
    public const TO_COUNTRY_SV = 'SV';
    public const TO_COUNTRY_GB = 'GB';
    public const TO_COUNTRY_GQ = 'GQ';
    public const TO_COUNTRY_ER = 'ER';
    public const TO_COUNTRY_EE = 'EE';
    public const TO_COUNTRY_ET = 'ET';
    public const TO_COUNTRY_FK = 'FK';
    public const TO_COUNTRY_FO = 'FO';
    public const TO_COUNTRY_FJ = 'FJ';
    public const TO_COUNTRY_FI = 'FI';
    public const TO_COUNTRY_FR = 'FR';
    public const TO_COUNTRY_GF = 'GF';
    public const TO_COUNTRY_PF = 'PF';
    public const TO_COUNTRY_TF = 'TF';
    public const TO_COUNTRY_GA = 'GA';
    public const TO_COUNTRY_GM = 'GM';
    public const TO_COUNTRY_GE = 'GE';
    public const TO_COUNTRY_DE = 'DE';
    public const TO_COUNTRY_GH = 'GH';
    public const TO_COUNTRY_GI = 'GI';
    public const TO_COUNTRY_GR = 'GR';
    public const TO_COUNTRY_GL = 'GL';
    public const TO_COUNTRY_GD = 'GD';
    public const TO_COUNTRY_GP = 'GP';
    public const TO_COUNTRY_GU = 'GU';
    public const TO_COUNTRY_GT = 'GT';
    public const TO_COUNTRY_GN = 'GN';
    public const TO_COUNTRY_GW = 'GW';
    public const TO_COUNTRY_GY = 'GY';
    public const TO_COUNTRY_HT = 'HT';
    public const TO_COUNTRY_HM = 'HM';
    public const TO_COUNTRY_HN = 'HN';
    public const TO_COUNTRY_HK = 'HK';
    public const TO_COUNTRY_HU = 'HU';
    public const TO_COUNTRY_IS = 'IS';
    public const TO_COUNTRY_IN = 'IN';
    public const TO_COUNTRY_ID = 'ID';
    public const TO_COUNTRY_IR = 'IR';
    public const TO_COUNTRY_IQ = 'IQ';
    public const TO_COUNTRY_IE = 'IE';
    public const TO_COUNTRY_IM = 'IM';
    public const TO_COUNTRY_IL = 'IL';
    public const TO_COUNTRY_IT = 'IT';
    public const TO_COUNTRY_JM = 'JM';
    public const TO_COUNTRY_JP = 'JP';
    public const TO_COUNTRY_JO = 'JO';
    public const TO_COUNTRY_KZ = 'KZ';
    public const TO_COUNTRY_KE = 'KE';
    public const TO_COUNTRY_KI = 'KI';
    public const TO_COUNTRY_KP = 'KP';
    public const TO_COUNTRY_KR = 'KR';
    public const TO_COUNTRY_RS = 'RS';
    public const TO_COUNTRY_FM2 = 'FM';
    public const TO_COUNTRY_KW = 'KW';
    public const TO_COUNTRY_KG = 'KG';
    public const TO_COUNTRY_LA = 'LA';
    public const TO_COUNTRY_LV = 'LV';
    public const TO_COUNTRY_LB = 'LB';
    public const TO_COUNTRY_LS = 'LS';
    public const TO_COUNTRY_LR = 'LR';
    public const TO_COUNTRY_LY = 'LY';
    public const TO_COUNTRY_LI = 'LI';
    public const TO_COUNTRY_LT = 'LT';
    public const TO_COUNTRY_LU = 'LU';
    public const TO_COUNTRY_MO = 'MO';
    public const TO_COUNTRY_MG = 'MG';
    public const TO_COUNTRY_MW = 'MW';
    public const TO_COUNTRY_MY = 'MY';
    public const TO_COUNTRY_MV = 'MV';
    public const TO_COUNTRY_ML = 'ML';
    public const TO_COUNTRY_MT = 'MT';
    public const TO_COUNTRY_MH = 'MH';
    public const TO_COUNTRY_MQ = 'MQ';
    public const TO_COUNTRY_MR = 'MR';
    public const TO_COUNTRY_MU = 'MU';
    public const TO_COUNTRY_YT = 'YT';
    public const TO_COUNTRY_MX = 'MX';
    public const TO_COUNTRY_FM3 = 'FM';
    public const TO_COUNTRY_MD = 'MD';
    public const TO_COUNTRY_MC = 'MC';
    public const TO_COUNTRY_MN = 'MN';
    public const TO_COUNTRY_ME = 'ME';
    public const TO_COUNTRY_MS = 'MS';
    public const TO_COUNTRY_MA = 'MA';
    public const TO_COUNTRY_MZ = 'MZ';
    public const TO_COUNTRY_MM = 'MM';
    public const TO_COUNTRY_NA = 'NA';
    public const TO_COUNTRY_NR = 'NR';
    public const TO_COUNTRY_NP = 'NP';
    public const TO_COUNTRY_NL = 'NL';
    public const TO_COUNTRY_KN = 'KN';
    public const TO_COUNTRY_NC = 'NC';
    public const TO_COUNTRY_NZ = 'NZ';
    public const TO_COUNTRY_NI = 'NI';
    public const TO_COUNTRY_NE = 'NE';
    public const TO_COUNTRY_NG = 'NG';
    public const TO_COUNTRY_NU = 'NU';
    public const TO_COUNTRY_MK = 'MK';
    public const TO_COUNTRY_NF = 'NF';
    public const TO_COUNTRY_MP = 'MP';
    public const TO_COUNTRY_NO = 'NO';
    public const TO_COUNTRY_OM = 'OM';
    public const TO_COUNTRY_PK = 'PK';
    public const TO_COUNTRY_PW = 'PW';
    public const TO_COUNTRY_PS = 'PS';
    public const TO_COUNTRY_PA = 'PA';
    public const TO_COUNTRY_PG = 'PG';
    public const TO_COUNTRY_PY = 'PY';
    public const TO_COUNTRY_PE = 'PE';
    public const TO_COUNTRY_PH = 'PH';
    public const TO_COUNTRY_PN = 'PN';
    public const TO_COUNTRY_FM4 = 'FM';
    public const TO_COUNTRY_PL = 'PL';
    public const TO_COUNTRY_PT = 'PT';
    public const TO_COUNTRY_PR = 'PR';
    public const TO_COUNTRY_QA = 'QA';
    public const TO_COUNTRY_RE = 'RE';
    public const TO_COUNTRY_RO = 'RO';
    public const TO_COUNTRY_RU = 'RU';
    public const TO_COUNTRY_RW = 'RW';
    public const TO_COUNTRY_BQ3 = 'BQ';
    public const TO_COUNTRY_BL = 'BL';
    public const TO_COUNTRY_BQ4 = 'BQ';
    public const TO_COUNTRY_SH = 'SH';
    public const TO_COUNTRY_KN2 = 'KN';
    public const TO_COUNTRY_KN3 = 'KN';
    public const TO_COUNTRY_LC = 'LC';
    public const TO_COUNTRY_SX = 'SX';
    public const TO_COUNTRY_MF = 'MF';
    public const TO_COUNTRY_PM = 'PM';
    public const TO_COUNTRY_VC = 'VC';
    public const TO_COUNTRY_WS = 'WS';
    public const TO_COUNTRY_SM = 'SM';
    public const TO_COUNTRY_ST = 'ST';
    public const TO_COUNTRY_SA = 'SA';
    public const TO_COUNTRY_GB2 = 'GB';
    public const TO_COUNTRY_SN = 'SN';
    public const TO_COUNTRY_RS2 = 'RS';
    public const TO_COUNTRY_SC = 'SC';
    public const TO_COUNTRY_SL = 'SL';
    public const TO_COUNTRY_SG = 'SG';
    public const TO_COUNTRY_SK = 'SK';
    public const TO_COUNTRY_SI = 'SI';
    public const TO_COUNTRY_SB = 'SB';
    public const TO_COUNTRY_SO = 'SO';
    public const TO_COUNTRY_ZA = 'ZA';
    public const TO_COUNTRY_GS = 'GS';
    public const TO_COUNTRY_SS = 'SS';
    public const TO_COUNTRY_ES = 'ES';
    public const TO_COUNTRY_LK = 'LK';
    public const TO_COUNTRY_SD = 'SD';
    public const TO_COUNTRY_SR = 'SR';
    public const TO_COUNTRY_SJ = 'SJ';
    public const TO_COUNTRY_SZ = 'SZ';
    public const TO_COUNTRY_SE = 'SE';
    public const TO_COUNTRY_CH = 'CH';
    public const TO_COUNTRY_SY = 'SY';
    public const TO_COUNTRY_TW = 'TW';
    public const TO_COUNTRY_TJ = 'TJ';
    public const TO_COUNTRY_TZ = 'TZ';
    public const TO_COUNTRY_TH = 'TH';
    public const TO_COUNTRY_TL = 'TL';
    public const TO_COUNTRY_TG = 'TG';
    public const TO_COUNTRY_TK = 'TK';
    public const TO_COUNTRY_TO = 'TO';
    public const TO_COUNTRY_TT = 'TT';
    public const TO_COUNTRY_TN = 'TN';
    public const TO_COUNTRY_TR = 'TR';
    public const TO_COUNTRY_TM = 'TM';
    public const TO_COUNTRY_TC = 'TC';
    public const TO_COUNTRY_TV = 'TV';
    public const TO_COUNTRY_UG = 'UG';
    public const TO_COUNTRY_UA = 'UA';
    public const TO_COUNTRY_AE = 'AE';
    public const TO_COUNTRY_US = 'US';
    public const TO_COUNTRY_UM = 'UM';
    public const TO_COUNTRY_UY = 'UY';
    public const TO_COUNTRY_UZ = 'UZ';
    public const TO_COUNTRY_VU = 'VU';
    public const TO_COUNTRY_VA = 'VA';
    public const TO_COUNTRY_VE = 'VE';
    public const TO_COUNTRY_VN = 'VN';
    public const TO_COUNTRY_VG = 'VG';
    public const TO_COUNTRY_VI = 'VI';
    public const TO_COUNTRY_GB3 = 'GB';
    public const TO_COUNTRY_WF = 'WF';
    public const TO_COUNTRY_EH = 'EH';
    public const TO_COUNTRY_FM5 = 'FM';
    public const TO_COUNTRY_YE = 'YE';
    public const TO_COUNTRY_ZM = 'ZM';
    public const TO_COUNTRY_ZW = 'ZW';
    public const SERVICE_CODE__11 = '11';
    public const SERVICE_CODE__65 = '65';
    public const SERVICE_CODE__07 = '07';
    public const SERVICE_CODE__74 = '74';
    public const SHIPMENT_TYPE_SALE = 'SALE';
    public const SHIPMENT_TYPE_GIFT = 'GIFT';
    public const SHIPMENT_TYPE_SAMPLE = 'SAMPLE';
    public const SHIPMENT_TYPE__RETURN = 'RETURN';
    public const SHIPMENT_TYPE_REPAIR = 'REPAIR';
    public const SHIPMENT_TYPE_DOCUMENTS = 'DOCUMENTS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromCountryAllowableValues()
    {
        return [
            self::FROM_COUNTRY_AF,
            self::FROM_COUNTRY_AX,
            self::FROM_COUNTRY_AL,
            self::FROM_COUNTRY_DZ,
            self::FROM_COUNTRY__AS,
            self::FROM_COUNTRY_AD,
            self::FROM_COUNTRY_AO,
            self::FROM_COUNTRY_AI,
            self::FROM_COUNTRY_AQ,
            self::FROM_COUNTRY_AG,
            self::FROM_COUNTRY_AR,
            self::FROM_COUNTRY_AM,
            self::FROM_COUNTRY_AW,
            self::FROM_COUNTRY_AU,
            self::FROM_COUNTRY_AT,
            self::FROM_COUNTRY_AZ,
            self::FROM_COUNTRY_BS,
            self::FROM_COUNTRY_BH,
            self::FROM_COUNTRY_BD,
            self::FROM_COUNTRY_BB,
            self::FROM_COUNTRY_AG2,
            self::FROM_COUNTRY_BY,
            self::FROM_COUNTRY_BE,
            self::FROM_COUNTRY_BZ,
            self::FROM_COUNTRY_BJ,
            self::FROM_COUNTRY_BM,
            self::FROM_COUNTRY_BT,
            self::FROM_COUNTRY_BO,
            self::FROM_COUNTRY_BQ,
            self::FROM_COUNTRY_BQ2,
            self::FROM_COUNTRY_BA,
            self::FROM_COUNTRY_BW,
            self::FROM_COUNTRY_BV,
            self::FROM_COUNTRY_BR,
            self::FROM_COUNTRY_IO,
            self::FROM_COUNTRY_BN,
            self::FROM_COUNTRY_BG,
            self::FROM_COUNTRY_BF,
            self::FROM_COUNTRY_BI,
            self::FROM_COUNTRY_CV,
            self::FROM_COUNTRY_KH,
            self::FROM_COUNTRY_CM,
            self::FROM_COUNTRY_CA,
            self::FROM_COUNTRY_KY,
            self::FROM_COUNTRY_CF,
            self::FROM_COUNTRY_TD,
            self::FROM_COUNTRY_CL,
            self::FROM_COUNTRY_CN,
            self::FROM_COUNTRY_CX,
            self::FROM_COUNTRY_FM,
            self::FROM_COUNTRY_CC,
            self::FROM_COUNTRY_CO,
            self::FROM_COUNTRY_KM,
            self::FROM_COUNTRY_CG,
            self::FROM_COUNTRY_CD,
            self::FROM_COUNTRY_CK,
            self::FROM_COUNTRY_CR,
            self::FROM_COUNTRY_CI,
            self::FROM_COUNTRY_HR,
            self::FROM_COUNTRY_CU,
            self::FROM_COUNTRY_CW,
            self::FROM_COUNTRY_CY,
            self::FROM_COUNTRY_CZ,
            self::FROM_COUNTRY_DK,
            self::FROM_COUNTRY_DJ,
            self::FROM_COUNTRY_DM,
            self::FROM_COUNTRY__DO,
            self::FROM_COUNTRY_EC,
            self::FROM_COUNTRY_EG,
            self::FROM_COUNTRY_SV,
            self::FROM_COUNTRY_GB,
            self::FROM_COUNTRY_GQ,
            self::FROM_COUNTRY_ER,
            self::FROM_COUNTRY_EE,
            self::FROM_COUNTRY_ET,
            self::FROM_COUNTRY_FK,
            self::FROM_COUNTRY_FO,
            self::FROM_COUNTRY_FJ,
            self::FROM_COUNTRY_FI,
            self::FROM_COUNTRY_FR,
            self::FROM_COUNTRY_GF,
            self::FROM_COUNTRY_PF,
            self::FROM_COUNTRY_TF,
            self::FROM_COUNTRY_GA,
            self::FROM_COUNTRY_GM,
            self::FROM_COUNTRY_GE,
            self::FROM_COUNTRY_DE,
            self::FROM_COUNTRY_GH,
            self::FROM_COUNTRY_GI,
            self::FROM_COUNTRY_GR,
            self::FROM_COUNTRY_GL,
            self::FROM_COUNTRY_GD,
            self::FROM_COUNTRY_GP,
            self::FROM_COUNTRY_GU,
            self::FROM_COUNTRY_GT,
            self::FROM_COUNTRY_GN,
            self::FROM_COUNTRY_GW,
            self::FROM_COUNTRY_GY,
            self::FROM_COUNTRY_HT,
            self::FROM_COUNTRY_HM,
            self::FROM_COUNTRY_HN,
            self::FROM_COUNTRY_HK,
            self::FROM_COUNTRY_HU,
            self::FROM_COUNTRY_IS,
            self::FROM_COUNTRY_IN,
            self::FROM_COUNTRY_ID,
            self::FROM_COUNTRY_IR,
            self::FROM_COUNTRY_IQ,
            self::FROM_COUNTRY_IE,
            self::FROM_COUNTRY_IM,
            self::FROM_COUNTRY_IL,
            self::FROM_COUNTRY_IT,
            self::FROM_COUNTRY_JM,
            self::FROM_COUNTRY_JP,
            self::FROM_COUNTRY_JO,
            self::FROM_COUNTRY_KZ,
            self::FROM_COUNTRY_KE,
            self::FROM_COUNTRY_KI,
            self::FROM_COUNTRY_KP,
            self::FROM_COUNTRY_KR,
            self::FROM_COUNTRY_RS,
            self::FROM_COUNTRY_FM2,
            self::FROM_COUNTRY_KW,
            self::FROM_COUNTRY_KG,
            self::FROM_COUNTRY_LA,
            self::FROM_COUNTRY_LV,
            self::FROM_COUNTRY_LB,
            self::FROM_COUNTRY_LS,
            self::FROM_COUNTRY_LR,
            self::FROM_COUNTRY_LY,
            self::FROM_COUNTRY_LI,
            self::FROM_COUNTRY_LT,
            self::FROM_COUNTRY_LU,
            self::FROM_COUNTRY_MO,
            self::FROM_COUNTRY_MG,
            self::FROM_COUNTRY_MW,
            self::FROM_COUNTRY_MY,
            self::FROM_COUNTRY_MV,
            self::FROM_COUNTRY_ML,
            self::FROM_COUNTRY_MT,
            self::FROM_COUNTRY_MH,
            self::FROM_COUNTRY_MQ,
            self::FROM_COUNTRY_MR,
            self::FROM_COUNTRY_MU,
            self::FROM_COUNTRY_YT,
            self::FROM_COUNTRY_MX,
            self::FROM_COUNTRY_FM3,
            self::FROM_COUNTRY_MD,
            self::FROM_COUNTRY_MC,
            self::FROM_COUNTRY_MN,
            self::FROM_COUNTRY_ME,
            self::FROM_COUNTRY_MS,
            self::FROM_COUNTRY_MA,
            self::FROM_COUNTRY_MZ,
            self::FROM_COUNTRY_MM,
            self::FROM_COUNTRY_NA,
            self::FROM_COUNTRY_NR,
            self::FROM_COUNTRY_NP,
            self::FROM_COUNTRY_NL,
            self::FROM_COUNTRY_KN,
            self::FROM_COUNTRY_NC,
            self::FROM_COUNTRY_NZ,
            self::FROM_COUNTRY_NI,
            self::FROM_COUNTRY_NE,
            self::FROM_COUNTRY_NG,
            self::FROM_COUNTRY_NU,
            self::FROM_COUNTRY_MK,
            self::FROM_COUNTRY_NF,
            self::FROM_COUNTRY_MP,
            self::FROM_COUNTRY_NO,
            self::FROM_COUNTRY_OM,
            self::FROM_COUNTRY_PK,
            self::FROM_COUNTRY_PW,
            self::FROM_COUNTRY_PS,
            self::FROM_COUNTRY_PA,
            self::FROM_COUNTRY_PG,
            self::FROM_COUNTRY_PY,
            self::FROM_COUNTRY_PE,
            self::FROM_COUNTRY_PH,
            self::FROM_COUNTRY_PN,
            self::FROM_COUNTRY_FM4,
            self::FROM_COUNTRY_PL,
            self::FROM_COUNTRY_PT,
            self::FROM_COUNTRY_PR,
            self::FROM_COUNTRY_QA,
            self::FROM_COUNTRY_RE,
            self::FROM_COUNTRY_RO,
            self::FROM_COUNTRY_RU,
            self::FROM_COUNTRY_RW,
            self::FROM_COUNTRY_BQ3,
            self::FROM_COUNTRY_BL,
            self::FROM_COUNTRY_BQ4,
            self::FROM_COUNTRY_SH,
            self::FROM_COUNTRY_KN2,
            self::FROM_COUNTRY_KN3,
            self::FROM_COUNTRY_LC,
            self::FROM_COUNTRY_SX,
            self::FROM_COUNTRY_MF,
            self::FROM_COUNTRY_PM,
            self::FROM_COUNTRY_VC,
            self::FROM_COUNTRY_WS,
            self::FROM_COUNTRY_SM,
            self::FROM_COUNTRY_ST,
            self::FROM_COUNTRY_SA,
            self::FROM_COUNTRY_GB2,
            self::FROM_COUNTRY_SN,
            self::FROM_COUNTRY_RS2,
            self::FROM_COUNTRY_SC,
            self::FROM_COUNTRY_SL,
            self::FROM_COUNTRY_SG,
            self::FROM_COUNTRY_SK,
            self::FROM_COUNTRY_SI,
            self::FROM_COUNTRY_SB,
            self::FROM_COUNTRY_SO,
            self::FROM_COUNTRY_ZA,
            self::FROM_COUNTRY_GS,
            self::FROM_COUNTRY_SS,
            self::FROM_COUNTRY_ES,
            self::FROM_COUNTRY_LK,
            self::FROM_COUNTRY_SD,
            self::FROM_COUNTRY_SR,
            self::FROM_COUNTRY_SJ,
            self::FROM_COUNTRY_SZ,
            self::FROM_COUNTRY_SE,
            self::FROM_COUNTRY_CH,
            self::FROM_COUNTRY_SY,
            self::FROM_COUNTRY_TW,
            self::FROM_COUNTRY_TJ,
            self::FROM_COUNTRY_TZ,
            self::FROM_COUNTRY_TH,
            self::FROM_COUNTRY_TL,
            self::FROM_COUNTRY_TG,
            self::FROM_COUNTRY_TK,
            self::FROM_COUNTRY_TO,
            self::FROM_COUNTRY_TT,
            self::FROM_COUNTRY_TN,
            self::FROM_COUNTRY_TR,
            self::FROM_COUNTRY_TM,
            self::FROM_COUNTRY_TC,
            self::FROM_COUNTRY_TV,
            self::FROM_COUNTRY_UG,
            self::FROM_COUNTRY_UA,
            self::FROM_COUNTRY_AE,
            self::FROM_COUNTRY_US,
            self::FROM_COUNTRY_UM,
            self::FROM_COUNTRY_UY,
            self::FROM_COUNTRY_UZ,
            self::FROM_COUNTRY_VU,
            self::FROM_COUNTRY_VA,
            self::FROM_COUNTRY_VE,
            self::FROM_COUNTRY_VN,
            self::FROM_COUNTRY_VG,
            self::FROM_COUNTRY_VI,
            self::FROM_COUNTRY_GB3,
            self::FROM_COUNTRY_WF,
            self::FROM_COUNTRY_EH,
            self::FROM_COUNTRY_FM5,
            self::FROM_COUNTRY_YE,
            self::FROM_COUNTRY_ZM,
            self::FROM_COUNTRY_ZW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getToCountryAllowableValues()
    {
        return [
            self::TO_COUNTRY_AF,
            self::TO_COUNTRY_AX,
            self::TO_COUNTRY_AL,
            self::TO_COUNTRY_DZ,
            self::TO_COUNTRY__AS,
            self::TO_COUNTRY_AD,
            self::TO_COUNTRY_AO,
            self::TO_COUNTRY_AI,
            self::TO_COUNTRY_AQ,
            self::TO_COUNTRY_AG,
            self::TO_COUNTRY_AR,
            self::TO_COUNTRY_AM,
            self::TO_COUNTRY_AW,
            self::TO_COUNTRY_AU,
            self::TO_COUNTRY_AT,
            self::TO_COUNTRY_AZ,
            self::TO_COUNTRY_BS,
            self::TO_COUNTRY_BH,
            self::TO_COUNTRY_BD,
            self::TO_COUNTRY_BB,
            self::TO_COUNTRY_AG2,
            self::TO_COUNTRY_BY,
            self::TO_COUNTRY_BE,
            self::TO_COUNTRY_BZ,
            self::TO_COUNTRY_BJ,
            self::TO_COUNTRY_BM,
            self::TO_COUNTRY_BT,
            self::TO_COUNTRY_BO,
            self::TO_COUNTRY_BQ,
            self::TO_COUNTRY_BQ2,
            self::TO_COUNTRY_BA,
            self::TO_COUNTRY_BW,
            self::TO_COUNTRY_BV,
            self::TO_COUNTRY_BR,
            self::TO_COUNTRY_IO,
            self::TO_COUNTRY_BN,
            self::TO_COUNTRY_BG,
            self::TO_COUNTRY_BF,
            self::TO_COUNTRY_BI,
            self::TO_COUNTRY_CV,
            self::TO_COUNTRY_KH,
            self::TO_COUNTRY_CM,
            self::TO_COUNTRY_CA,
            self::TO_COUNTRY_KY,
            self::TO_COUNTRY_CF,
            self::TO_COUNTRY_TD,
            self::TO_COUNTRY_CL,
            self::TO_COUNTRY_CN,
            self::TO_COUNTRY_CX,
            self::TO_COUNTRY_FM,
            self::TO_COUNTRY_CC,
            self::TO_COUNTRY_CO,
            self::TO_COUNTRY_KM,
            self::TO_COUNTRY_CG,
            self::TO_COUNTRY_CD,
            self::TO_COUNTRY_CK,
            self::TO_COUNTRY_CR,
            self::TO_COUNTRY_CI,
            self::TO_COUNTRY_HR,
            self::TO_COUNTRY_CU,
            self::TO_COUNTRY_CW,
            self::TO_COUNTRY_CY,
            self::TO_COUNTRY_CZ,
            self::TO_COUNTRY_DK,
            self::TO_COUNTRY_DJ,
            self::TO_COUNTRY_DM,
            self::TO_COUNTRY__DO,
            self::TO_COUNTRY_EC,
            self::TO_COUNTRY_EG,
            self::TO_COUNTRY_SV,
            self::TO_COUNTRY_GB,
            self::TO_COUNTRY_GQ,
            self::TO_COUNTRY_ER,
            self::TO_COUNTRY_EE,
            self::TO_COUNTRY_ET,
            self::TO_COUNTRY_FK,
            self::TO_COUNTRY_FO,
            self::TO_COUNTRY_FJ,
            self::TO_COUNTRY_FI,
            self::TO_COUNTRY_FR,
            self::TO_COUNTRY_GF,
            self::TO_COUNTRY_PF,
            self::TO_COUNTRY_TF,
            self::TO_COUNTRY_GA,
            self::TO_COUNTRY_GM,
            self::TO_COUNTRY_GE,
            self::TO_COUNTRY_DE,
            self::TO_COUNTRY_GH,
            self::TO_COUNTRY_GI,
            self::TO_COUNTRY_GR,
            self::TO_COUNTRY_GL,
            self::TO_COUNTRY_GD,
            self::TO_COUNTRY_GP,
            self::TO_COUNTRY_GU,
            self::TO_COUNTRY_GT,
            self::TO_COUNTRY_GN,
            self::TO_COUNTRY_GW,
            self::TO_COUNTRY_GY,
            self::TO_COUNTRY_HT,
            self::TO_COUNTRY_HM,
            self::TO_COUNTRY_HN,
            self::TO_COUNTRY_HK,
            self::TO_COUNTRY_HU,
            self::TO_COUNTRY_IS,
            self::TO_COUNTRY_IN,
            self::TO_COUNTRY_ID,
            self::TO_COUNTRY_IR,
            self::TO_COUNTRY_IQ,
            self::TO_COUNTRY_IE,
            self::TO_COUNTRY_IM,
            self::TO_COUNTRY_IL,
            self::TO_COUNTRY_IT,
            self::TO_COUNTRY_JM,
            self::TO_COUNTRY_JP,
            self::TO_COUNTRY_JO,
            self::TO_COUNTRY_KZ,
            self::TO_COUNTRY_KE,
            self::TO_COUNTRY_KI,
            self::TO_COUNTRY_KP,
            self::TO_COUNTRY_KR,
            self::TO_COUNTRY_RS,
            self::TO_COUNTRY_FM2,
            self::TO_COUNTRY_KW,
            self::TO_COUNTRY_KG,
            self::TO_COUNTRY_LA,
            self::TO_COUNTRY_LV,
            self::TO_COUNTRY_LB,
            self::TO_COUNTRY_LS,
            self::TO_COUNTRY_LR,
            self::TO_COUNTRY_LY,
            self::TO_COUNTRY_LI,
            self::TO_COUNTRY_LT,
            self::TO_COUNTRY_LU,
            self::TO_COUNTRY_MO,
            self::TO_COUNTRY_MG,
            self::TO_COUNTRY_MW,
            self::TO_COUNTRY_MY,
            self::TO_COUNTRY_MV,
            self::TO_COUNTRY_ML,
            self::TO_COUNTRY_MT,
            self::TO_COUNTRY_MH,
            self::TO_COUNTRY_MQ,
            self::TO_COUNTRY_MR,
            self::TO_COUNTRY_MU,
            self::TO_COUNTRY_YT,
            self::TO_COUNTRY_MX,
            self::TO_COUNTRY_FM3,
            self::TO_COUNTRY_MD,
            self::TO_COUNTRY_MC,
            self::TO_COUNTRY_MN,
            self::TO_COUNTRY_ME,
            self::TO_COUNTRY_MS,
            self::TO_COUNTRY_MA,
            self::TO_COUNTRY_MZ,
            self::TO_COUNTRY_MM,
            self::TO_COUNTRY_NA,
            self::TO_COUNTRY_NR,
            self::TO_COUNTRY_NP,
            self::TO_COUNTRY_NL,
            self::TO_COUNTRY_KN,
            self::TO_COUNTRY_NC,
            self::TO_COUNTRY_NZ,
            self::TO_COUNTRY_NI,
            self::TO_COUNTRY_NE,
            self::TO_COUNTRY_NG,
            self::TO_COUNTRY_NU,
            self::TO_COUNTRY_MK,
            self::TO_COUNTRY_NF,
            self::TO_COUNTRY_MP,
            self::TO_COUNTRY_NO,
            self::TO_COUNTRY_OM,
            self::TO_COUNTRY_PK,
            self::TO_COUNTRY_PW,
            self::TO_COUNTRY_PS,
            self::TO_COUNTRY_PA,
            self::TO_COUNTRY_PG,
            self::TO_COUNTRY_PY,
            self::TO_COUNTRY_PE,
            self::TO_COUNTRY_PH,
            self::TO_COUNTRY_PN,
            self::TO_COUNTRY_FM4,
            self::TO_COUNTRY_PL,
            self::TO_COUNTRY_PT,
            self::TO_COUNTRY_PR,
            self::TO_COUNTRY_QA,
            self::TO_COUNTRY_RE,
            self::TO_COUNTRY_RO,
            self::TO_COUNTRY_RU,
            self::TO_COUNTRY_RW,
            self::TO_COUNTRY_BQ3,
            self::TO_COUNTRY_BL,
            self::TO_COUNTRY_BQ4,
            self::TO_COUNTRY_SH,
            self::TO_COUNTRY_KN2,
            self::TO_COUNTRY_KN3,
            self::TO_COUNTRY_LC,
            self::TO_COUNTRY_SX,
            self::TO_COUNTRY_MF,
            self::TO_COUNTRY_PM,
            self::TO_COUNTRY_VC,
            self::TO_COUNTRY_WS,
            self::TO_COUNTRY_SM,
            self::TO_COUNTRY_ST,
            self::TO_COUNTRY_SA,
            self::TO_COUNTRY_GB2,
            self::TO_COUNTRY_SN,
            self::TO_COUNTRY_RS2,
            self::TO_COUNTRY_SC,
            self::TO_COUNTRY_SL,
            self::TO_COUNTRY_SG,
            self::TO_COUNTRY_SK,
            self::TO_COUNTRY_SI,
            self::TO_COUNTRY_SB,
            self::TO_COUNTRY_SO,
            self::TO_COUNTRY_ZA,
            self::TO_COUNTRY_GS,
            self::TO_COUNTRY_SS,
            self::TO_COUNTRY_ES,
            self::TO_COUNTRY_LK,
            self::TO_COUNTRY_SD,
            self::TO_COUNTRY_SR,
            self::TO_COUNTRY_SJ,
            self::TO_COUNTRY_SZ,
            self::TO_COUNTRY_SE,
            self::TO_COUNTRY_CH,
            self::TO_COUNTRY_SY,
            self::TO_COUNTRY_TW,
            self::TO_COUNTRY_TJ,
            self::TO_COUNTRY_TZ,
            self::TO_COUNTRY_TH,
            self::TO_COUNTRY_TL,
            self::TO_COUNTRY_TG,
            self::TO_COUNTRY_TK,
            self::TO_COUNTRY_TO,
            self::TO_COUNTRY_TT,
            self::TO_COUNTRY_TN,
            self::TO_COUNTRY_TR,
            self::TO_COUNTRY_TM,
            self::TO_COUNTRY_TC,
            self::TO_COUNTRY_TV,
            self::TO_COUNTRY_UG,
            self::TO_COUNTRY_UA,
            self::TO_COUNTRY_AE,
            self::TO_COUNTRY_US,
            self::TO_COUNTRY_UM,
            self::TO_COUNTRY_UY,
            self::TO_COUNTRY_UZ,
            self::TO_COUNTRY_VU,
            self::TO_COUNTRY_VA,
            self::TO_COUNTRY_VE,
            self::TO_COUNTRY_VN,
            self::TO_COUNTRY_VG,
            self::TO_COUNTRY_VI,
            self::TO_COUNTRY_GB3,
            self::TO_COUNTRY_WF,
            self::TO_COUNTRY_EH,
            self::TO_COUNTRY_FM5,
            self::TO_COUNTRY_YE,
            self::TO_COUNTRY_ZM,
            self::TO_COUNTRY_ZW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceCodeAllowableValues()
    {
        return [
            self::SERVICE_CODE__11,
            self::SERVICE_CODE__65,
            self::SERVICE_CODE__07,
            self::SERVICE_CODE__74,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues()
    {
        return [
            self::SHIPMENT_TYPE_SALE,
            self::SHIPMENT_TYPE_GIFT,
            self::SHIPMENT_TYPE_SAMPLE,
            self::SHIPMENT_TYPE__RETURN,
            self::SHIPMENT_TYPE_REPAIR,
            self::SHIPMENT_TYPE_DOCUMENTS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('packages', $data ?? [], null);
        $this->setIfExists('from_country', $data ?? [], null);
        $this->setIfExists('from_contact_name', $data ?? [], null);
        $this->setIfExists('from_company_name', $data ?? [], null);
        $this->setIfExists('from_address', $data ?? [], null);
        $this->setIfExists('from_additional_address', $data ?? [], null);
        $this->setIfExists('from_state', $data ?? [], null);
        $this->setIfExists('from_postal_code', $data ?? [], null);
        $this->setIfExists('from_city', $data ?? [], null);
        $this->setIfExists('from_phone', $data ?? [], null);
        $this->setIfExists('from_email', $data ?? [], null);
        $this->setIfExists('to_country', $data ?? [], null);
        $this->setIfExists('to_contact_name', $data ?? [], null);
        $this->setIfExists('to_company_name', $data ?? [], null);
        $this->setIfExists('to_address', $data ?? [], null);
        $this->setIfExists('to_additional_address', $data ?? [], null);
        $this->setIfExists('to_state', $data ?? [], null);
        $this->setIfExists('to_postal_code', $data ?? [], null);
        $this->setIfExists('to_city', $data ?? [], null);
        $this->setIfExists('to_phone', $data ?? [], null);
        $this->setIfExists('to_email', $data ?? [], null);
        $this->setIfExists('service_code', $data ?? [], null);
        $this->setIfExists('autopay', $data ?? [], false);
        $this->setIfExists('save_address', $data ?? [], false);
        $this->setIfExists('shipment_type', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('terms_of_shipment', $data ?? [], null);
        $this->setIfExists('insurance_amount', $data ?? [], null);
        $this->setIfExists('insurance_content', $data ?? [], null);
        $this->setIfExists('insurance_used_item', $data ?? [], null);
        $this->setIfExists('cod_amount', $data ?? [], null);
        $this->setIfExists('cod_reason', $data ?? [], null);
        $this->setIfExists('is_b2c', $data ?? [], null);
        $this->setIfExists('is_saturday_delivery', $data ?? [], null);
        $this->setIfExists('carbon_neutral', $data ?? [], null);
        $this->setIfExists('return_service', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['packages'] === null) {
            $invalidProperties[] = "'packages' can't be null";
        }
        if ($this->container['from_country'] === null) {
            $invalidProperties[] = "'from_country' can't be null";
        }
        $allowedValues = $this->getFromCountryAllowableValues();
        if (!is_null($this->container['from_country']) && !in_array($this->container['from_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'from_country', must be one of '%s'",
                $this->container['from_country'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['from_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'from_country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['from_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'from_country', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['from_contact_name'] === null) {
            $invalidProperties[] = "'from_contact_name' can't be null";
        }
        if ((mb_strlen($this->container['from_contact_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'from_contact_name', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['from_contact_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_contact_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['from_company_name']) && (mb_strlen($this->container['from_company_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'from_company_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['from_company_name']) && (mb_strlen($this->container['from_company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_company_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['from_address'] === null) {
            $invalidProperties[] = "'from_address' can't be null";
        }
        if ((mb_strlen($this->container['from_address']) > 35)) {
            $invalidProperties[] = "invalid value for 'from_address', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['from_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['from_additional_address']) && (mb_strlen($this->container['from_additional_address']) > 35)) {
            $invalidProperties[] = "invalid value for 'from_additional_address', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['from_additional_address']) && (mb_strlen($this->container['from_additional_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_additional_address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['from_postal_code'] === null) {
            $invalidProperties[] = "'from_postal_code' can't be null";
        }
        if ((mb_strlen($this->container['from_postal_code']) > 9)) {
            $invalidProperties[] = "invalid value for 'from_postal_code', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['from_postal_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_postal_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['from_city'] === null) {
            $invalidProperties[] = "'from_city' can't be null";
        }
        if ((mb_strlen($this->container['from_city']) > 30)) {
            $invalidProperties[] = "invalid value for 'from_city', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['from_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['from_phone']) && (mb_strlen($this->container['from_phone']) > 15)) {
            $invalidProperties[] = "invalid value for 'from_phone', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['from_phone']) && (mb_strlen($this->container['from_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['from_email']) && (mb_strlen($this->container['from_email']) > 50)) {
            $invalidProperties[] = "invalid value for 'from_email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['from_email']) && (mb_strlen($this->container['from_email']) < 1)) {
            $invalidProperties[] = "invalid value for 'from_email', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to_country'] === null) {
            $invalidProperties[] = "'to_country' can't be null";
        }
        $allowedValues = $this->getToCountryAllowableValues();
        if (!is_null($this->container['to_country']) && !in_array($this->container['to_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'to_country', must be one of '%s'",
                $this->container['to_country'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['to_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'to_country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['to_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'to_country', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['to_contact_name'] === null) {
            $invalidProperties[] = "'to_contact_name' can't be null";
        }
        if ((mb_strlen($this->container['to_contact_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'to_contact_name', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['to_contact_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_contact_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['to_company_name']) && (mb_strlen($this->container['to_company_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'to_company_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['to_company_name']) && (mb_strlen($this->container['to_company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_company_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to_address'] === null) {
            $invalidProperties[] = "'to_address' can't be null";
        }
        if ((mb_strlen($this->container['to_address']) > 35)) {
            $invalidProperties[] = "invalid value for 'to_address', the character length must be smaller than or equal to 35.";
        }

        if ((mb_strlen($this->container['to_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['to_additional_address']) && (mb_strlen($this->container['to_additional_address']) > 35)) {
            $invalidProperties[] = "invalid value for 'to_additional_address', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['to_additional_address']) && (mb_strlen($this->container['to_additional_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_additional_address', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to_postal_code'] === null) {
            $invalidProperties[] = "'to_postal_code' can't be null";
        }
        if ((mb_strlen($this->container['to_postal_code']) > 9)) {
            $invalidProperties[] = "invalid value for 'to_postal_code', the character length must be smaller than or equal to 9.";
        }

        if ((mb_strlen($this->container['to_postal_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_postal_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['to_city'] === null) {
            $invalidProperties[] = "'to_city' can't be null";
        }
        if ((mb_strlen($this->container['to_city']) > 30)) {
            $invalidProperties[] = "invalid value for 'to_city', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['to_city']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_city', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['to_phone']) && (mb_strlen($this->container['to_phone']) > 15)) {
            $invalidProperties[] = "invalid value for 'to_phone', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['to_phone']) && (mb_strlen($this->container['to_phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['to_email']) && (mb_strlen($this->container['to_email']) > 50)) {
            $invalidProperties[] = "invalid value for 'to_email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['to_email']) && (mb_strlen($this->container['to_email']) < 1)) {
            $invalidProperties[] = "invalid value for 'to_email', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['service_code'] === null) {
            $invalidProperties[] = "'service_code' can't be null";
        }
        $allowedValues = $this->getServiceCodeAllowableValues();
        if (!is_null($this->container['service_code']) && !in_array($this->container['service_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'service_code', must be one of '%s'",
                $this->container['service_code'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_type', must be one of '%s'",
                $this->container['shipment_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) > 100)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['invoice_number']) && (mb_strlen($this->container['invoice_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'invoice_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['insurance_amount']) && ($this->container['insurance_amount'] > 50000.0)) {
            $invalidProperties[] = "invalid value for 'insurance_amount', must be smaller than or equal to 50000.0.";
        }

        if (!is_null($this->container['insurance_amount']) && ($this->container['insurance_amount'] < 1.0)) {
            $invalidProperties[] = "invalid value for 'insurance_amount', must be bigger than or equal to 1.0.";
        }

        if (!is_null($this->container['insurance_content']) && (mb_strlen($this->container['insurance_content']) > 100)) {
            $invalidProperties[] = "invalid value for 'insurance_content', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['insurance_content']) && (mb_strlen($this->container['insurance_content']) < 1)) {
            $invalidProperties[] = "invalid value for 'insurance_content', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cod_amount']) && ($this->container['cod_amount'] > 2500.0)) {
            $invalidProperties[] = "invalid value for 'cod_amount', must be smaller than or equal to 2500.0.";
        }

        if (!is_null($this->container['cod_amount']) && ($this->container['cod_amount'] < 0.01)) {
            $invalidProperties[] = "invalid value for 'cod_amount', must be bigger than or equal to 0.01.";
        }

        if (!is_null($this->container['cod_reason']) && (mb_strlen($this->container['cod_reason']) > 21)) {
            $invalidProperties[] = "invalid value for 'cod_reason', the character length must be smaller than or equal to 21.";
        }

        if (!is_null($this->container['cod_reason']) && (mb_strlen($this->container['cod_reason']) < 1)) {
            $invalidProperties[] = "invalid value for 'cod_reason', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets packages
     *
     * @return \kruegge82\shipstage\Model\UPSPackage[]
     */
    public function getPackages(): array
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \kruegge82\shipstage\Model\UPSPackage[] $packages packages
     *
     * @return $this
     */
    public function setPackages(array $packages): static
    {
        if (is_null($packages)) {
            throw new InvalidArgumentException('non-nullable packages cannot be null');
        }
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets from_country
     *
     * @return string
     */
    public function getFromCountry(): string
    {
        return $this->container['from_country'];
    }

    /**
     * Sets from_country
     *
     * @param string $from_country from_country
     *
     * @return $this
     */
    public function setFromCountry(string $from_country): static
    {
        if (is_null($from_country)) {
            throw new InvalidArgumentException('non-nullable from_country cannot be null');
        }
        $allowedValues = $this->getFromCountryAllowableValues();
        if (!in_array($from_country, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'from_country', must be one of '%s'",
                    $from_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($from_country) > 2)) {
            throw new InvalidArgumentException('invalid length for $from_country when calling UPSDataModel., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($from_country) < 2)) {
            throw new InvalidArgumentException('invalid length for $from_country when calling UPSDataModel., must be bigger than or equal to 2.');
        }

        $this->container['from_country'] = $from_country;

        return $this;
    }

    /**
     * Gets from_contact_name
     *
     * @return string
     */
    public function getFromContactName(): string
    {
        return $this->container['from_contact_name'];
    }

    /**
     * Sets from_contact_name
     *
     * @param string $from_contact_name from_contact_name
     *
     * @return $this
     */
    public function setFromContactName(string $from_contact_name): static
    {
        if (is_null($from_contact_name)) {
            throw new InvalidArgumentException('non-nullable from_contact_name cannot be null');
        }
        if ((mb_strlen($from_contact_name) > 35)) {
            throw new InvalidArgumentException('invalid length for $from_contact_name when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($from_contact_name) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_contact_name when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_contact_name'] = $from_contact_name;

        return $this;
    }

    /**
     * Gets from_company_name
     *
     * @return string|null
     */
    public function getFromCompanyName(): ?string
    {
        return $this->container['from_company_name'];
    }

    /**
     * Sets from_company_name
     *
     * @param string|null $from_company_name from_company_name
     *
     * @return $this
     */
    public function setFromCompanyName(?string $from_company_name): static
    {
        if (is_null($from_company_name)) {
            throw new InvalidArgumentException('non-nullable from_company_name cannot be null');
        }
        if ((mb_strlen($from_company_name) > 35)) {
            throw new InvalidArgumentException('invalid length for $from_company_name when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($from_company_name) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_company_name when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_company_name'] = $from_company_name;

        return $this;
    }

    /**
     * Gets from_address
     *
     * @return string
     */
    public function getFromAddress(): string
    {
        return $this->container['from_address'];
    }

    /**
     * Sets from_address
     *
     * @param string $from_address from_address
     *
     * @return $this
     */
    public function setFromAddress(string $from_address): static
    {
        if (is_null($from_address)) {
            throw new InvalidArgumentException('non-nullable from_address cannot be null');
        }
        if ((mb_strlen($from_address) > 35)) {
            throw new InvalidArgumentException('invalid length for $from_address when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($from_address) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_address when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_address'] = $from_address;

        return $this;
    }

    /**
     * Gets from_additional_address
     *
     * @return string|null
     */
    public function getFromAdditionalAddress(): ?string
    {
        return $this->container['from_additional_address'];
    }

    /**
     * Sets from_additional_address
     *
     * @param string|null $from_additional_address from_additional_address
     *
     * @return $this
     */
    public function setFromAdditionalAddress(?string $from_additional_address): static
    {
        if (is_null($from_additional_address)) {
            throw new InvalidArgumentException('non-nullable from_additional_address cannot be null');
        }
        if ((mb_strlen($from_additional_address) > 35)) {
            throw new InvalidArgumentException('invalid length for $from_additional_address when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($from_additional_address) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_additional_address when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_additional_address'] = $from_additional_address;

        return $this;
    }

    /**
     * Gets from_state
     *
     * @return \kruegge82\shipstage\Model\State|null
     */
    public function getFromState(): ?\kruegge82\shipstage\Model\State
    {
        return $this->container['from_state'];
    }

    /**
     * Sets from_state
     *
     * @param \kruegge82\shipstage\Model\State|null $from_state from_state
     *
     * @return $this
     */
    public function setFromState(?\kruegge82\shipstage\Model\State $from_state): static
    {
        if (is_null($from_state)) {
            throw new InvalidArgumentException('non-nullable from_state cannot be null');
        }
        $this->container['from_state'] = $from_state;

        return $this;
    }

    /**
     * Gets from_postal_code
     *
     * @return string
     */
    public function getFromPostalCode(): string
    {
        return $this->container['from_postal_code'];
    }

    /**
     * Sets from_postal_code
     *
     * @param string $from_postal_code from_postal_code
     *
     * @return $this
     */
    public function setFromPostalCode(string $from_postal_code): static
    {
        if (is_null($from_postal_code)) {
            throw new InvalidArgumentException('non-nullable from_postal_code cannot be null');
        }
        if ((mb_strlen($from_postal_code) > 9)) {
            throw new InvalidArgumentException('invalid length for $from_postal_code when calling UPSDataModel., must be smaller than or equal to 9.');
        }
        if ((mb_strlen($from_postal_code) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_postal_code when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_postal_code'] = $from_postal_code;

        return $this;
    }

    /**
     * Gets from_city
     *
     * @return string
     */
    public function getFromCity(): string
    {
        return $this->container['from_city'];
    }

    /**
     * Sets from_city
     *
     * @param string $from_city from_city
     *
     * @return $this
     */
    public function setFromCity(string $from_city): static
    {
        if (is_null($from_city)) {
            throw new InvalidArgumentException('non-nullable from_city cannot be null');
        }
        if ((mb_strlen($from_city) > 30)) {
            throw new InvalidArgumentException('invalid length for $from_city when calling UPSDataModel., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($from_city) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_city when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_city'] = $from_city;

        return $this;
    }

    /**
     * Gets from_phone
     *
     * @return string|null
     */
    public function getFromPhone(): ?string
    {
        return $this->container['from_phone'];
    }

    /**
     * Sets from_phone
     *
     * @param string|null $from_phone from_phone
     *
     * @return $this
     */
    public function setFromPhone(?string $from_phone): static
    {
        if (is_null($from_phone)) {
            throw new InvalidArgumentException('non-nullable from_phone cannot be null');
        }
        if ((mb_strlen($from_phone) > 15)) {
            throw new InvalidArgumentException('invalid length for $from_phone when calling UPSDataModel., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($from_phone) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_phone when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_phone'] = $from_phone;

        return $this;
    }

    /**
     * Gets from_email
     *
     * @return string|null
     */
    public function getFromEmail(): ?string
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string|null $from_email from_email
     *
     * @return $this
     */
    public function setFromEmail(?string $from_email): static
    {
        if (is_null($from_email)) {
            throw new InvalidArgumentException('non-nullable from_email cannot be null');
        }
        if ((mb_strlen($from_email) > 50)) {
            throw new InvalidArgumentException('invalid length for $from_email when calling UPSDataModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($from_email) < 1)) {
            throw new InvalidArgumentException('invalid length for $from_email when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets to_country
     *
     * @return string
     */
    public function getToCountry(): string
    {
        return $this->container['to_country'];
    }

    /**
     * Sets to_country
     *
     * @param string $to_country to_country
     *
     * @return $this
     */
    public function setToCountry(string $to_country): static
    {
        if (is_null($to_country)) {
            throw new InvalidArgumentException('non-nullable to_country cannot be null');
        }
        $allowedValues = $this->getToCountryAllowableValues();
        if (!in_array($to_country, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'to_country', must be one of '%s'",
                    $to_country,
                    implode("', '", $allowedValues)
                )
            );
        }
        if ((mb_strlen($to_country) > 2)) {
            throw new InvalidArgumentException('invalid length for $to_country when calling UPSDataModel., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($to_country) < 2)) {
            throw new InvalidArgumentException('invalid length for $to_country when calling UPSDataModel., must be bigger than or equal to 2.');
        }

        $this->container['to_country'] = $to_country;

        return $this;
    }

    /**
     * Gets to_contact_name
     *
     * @return string
     */
    public function getToContactName(): string
    {
        return $this->container['to_contact_name'];
    }

    /**
     * Sets to_contact_name
     *
     * @param string $to_contact_name to_contact_name
     *
     * @return $this
     */
    public function setToContactName(string $to_contact_name): static
    {
        if (is_null($to_contact_name)) {
            throw new InvalidArgumentException('non-nullable to_contact_name cannot be null');
        }
        if ((mb_strlen($to_contact_name) > 35)) {
            throw new InvalidArgumentException('invalid length for $to_contact_name when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($to_contact_name) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_contact_name when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_contact_name'] = $to_contact_name;

        return $this;
    }

    /**
     * Gets to_company_name
     *
     * @return string|null
     */
    public function getToCompanyName(): ?string
    {
        return $this->container['to_company_name'];
    }

    /**
     * Sets to_company_name
     *
     * @param string|null $to_company_name to_company_name
     *
     * @return $this
     */
    public function setToCompanyName(?string $to_company_name): static
    {
        if (is_null($to_company_name)) {
            throw new InvalidArgumentException('non-nullable to_company_name cannot be null');
        }
        if ((mb_strlen($to_company_name) > 35)) {
            throw new InvalidArgumentException('invalid length for $to_company_name when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($to_company_name) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_company_name when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_company_name'] = $to_company_name;

        return $this;
    }

    /**
     * Gets to_address
     *
     * @return string
     */
    public function getToAddress(): string
    {
        return $this->container['to_address'];
    }

    /**
     * Sets to_address
     *
     * @param string $to_address to_address
     *
     * @return $this
     */
    public function setToAddress(string $to_address): static
    {
        if (is_null($to_address)) {
            throw new InvalidArgumentException('non-nullable to_address cannot be null');
        }
        if ((mb_strlen($to_address) > 35)) {
            throw new InvalidArgumentException('invalid length for $to_address when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($to_address) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_address when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_address'] = $to_address;

        return $this;
    }

    /**
     * Gets to_additional_address
     *
     * @return string|null
     */
    public function getToAdditionalAddress(): ?string
    {
        return $this->container['to_additional_address'];
    }

    /**
     * Sets to_additional_address
     *
     * @param string|null $to_additional_address to_additional_address
     *
     * @return $this
     */
    public function setToAdditionalAddress(?string $to_additional_address): static
    {
        if (is_null($to_additional_address)) {
            throw new InvalidArgumentException('non-nullable to_additional_address cannot be null');
        }
        if ((mb_strlen($to_additional_address) > 35)) {
            throw new InvalidArgumentException('invalid length for $to_additional_address when calling UPSDataModel., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($to_additional_address) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_additional_address when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_additional_address'] = $to_additional_address;

        return $this;
    }

    /**
     * Gets to_state
     *
     * @return \kruegge82\shipstage\Model\State|null
     */
    public function getToState(): ?\kruegge82\shipstage\Model\State
    {
        return $this->container['to_state'];
    }

    /**
     * Sets to_state
     *
     * @param \kruegge82\shipstage\Model\State|null $to_state to_state
     *
     * @return $this
     */
    public function setToState(?\kruegge82\shipstage\Model\State $to_state): static
    {
        if (is_null($to_state)) {
            throw new InvalidArgumentException('non-nullable to_state cannot be null');
        }
        $this->container['to_state'] = $to_state;

        return $this;
    }

    /**
     * Gets to_postal_code
     *
     * @return string
     */
    public function getToPostalCode(): string
    {
        return $this->container['to_postal_code'];
    }

    /**
     * Sets to_postal_code
     *
     * @param string $to_postal_code to_postal_code
     *
     * @return $this
     */
    public function setToPostalCode(string $to_postal_code): static
    {
        if (is_null($to_postal_code)) {
            throw new InvalidArgumentException('non-nullable to_postal_code cannot be null');
        }
        if ((mb_strlen($to_postal_code) > 9)) {
            throw new InvalidArgumentException('invalid length for $to_postal_code when calling UPSDataModel., must be smaller than or equal to 9.');
        }
        if ((mb_strlen($to_postal_code) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_postal_code when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_postal_code'] = $to_postal_code;

        return $this;
    }

    /**
     * Gets to_city
     *
     * @return string
     */
    public function getToCity(): string
    {
        return $this->container['to_city'];
    }

    /**
     * Sets to_city
     *
     * @param string $to_city to_city
     *
     * @return $this
     */
    public function setToCity(string $to_city): static
    {
        if (is_null($to_city)) {
            throw new InvalidArgumentException('non-nullable to_city cannot be null');
        }
        if ((mb_strlen($to_city) > 30)) {
            throw new InvalidArgumentException('invalid length for $to_city when calling UPSDataModel., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($to_city) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_city when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_city'] = $to_city;

        return $this;
    }

    /**
     * Gets to_phone
     *
     * @return string|null
     */
    public function getToPhone(): ?string
    {
        return $this->container['to_phone'];
    }

    /**
     * Sets to_phone
     *
     * @param string|null $to_phone to_phone
     *
     * @return $this
     */
    public function setToPhone(?string $to_phone): static
    {
        if (is_null($to_phone)) {
            throw new InvalidArgumentException('non-nullable to_phone cannot be null');
        }
        if ((mb_strlen($to_phone) > 15)) {
            throw new InvalidArgumentException('invalid length for $to_phone when calling UPSDataModel., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($to_phone) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_phone when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_phone'] = $to_phone;

        return $this;
    }

    /**
     * Gets to_email
     *
     * @return string|null
     */
    public function getToEmail(): ?string
    {
        return $this->container['to_email'];
    }

    /**
     * Sets to_email
     *
     * @param string|null $to_email to_email
     *
     * @return $this
     */
    public function setToEmail(?string $to_email): static
    {
        if (is_null($to_email)) {
            throw new InvalidArgumentException('non-nullable to_email cannot be null');
        }
        if ((mb_strlen($to_email) > 50)) {
            throw new InvalidArgumentException('invalid length for $to_email when calling UPSDataModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($to_email) < 1)) {
            throw new InvalidArgumentException('invalid length for $to_email when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['to_email'] = $to_email;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode(): string
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code UPS Standard (11), UPS Saver (65), UPS Express 10:30 (07), UPS Express 12:00 (74)
     *
     * @return $this
     */
    public function setServiceCode(string $service_code): static
    {
        if (is_null($service_code)) {
            throw new InvalidArgumentException('non-nullable service_code cannot be null');
        }
        $allowedValues = $this->getServiceCodeAllowableValues();
        if (!in_array($service_code, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'service_code', must be one of '%s'",
                    $service_code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets autopay
     *
     * @return bool|null
     */
    public function getAutopay(): ?bool
    {
        return $this->container['autopay'];
    }

    /**
     * Sets autopay
     *
     * @param bool|null $autopay Set \"true\" to generate label automatically
     *
     * @return $this
     */
    public function setAutopay(?bool $autopay): static
    {
        if (is_null($autopay)) {
            throw new InvalidArgumentException('non-nullable autopay cannot be null');
        }
        $this->container['autopay'] = $autopay;

        return $this;
    }

    /**
     * Gets save_address
     *
     * @return bool|null
     */
    public function getSaveAddress(): ?bool
    {
        return $this->container['save_address'];
    }

    /**
     * Sets save_address
     *
     * @param bool|null $save_address Set \"true\" to save receiver address in address book
     *
     * @return $this
     */
    public function setSaveAddress(?bool $save_address): static
    {
        if (is_null($save_address)) {
            throw new InvalidArgumentException('non-nullable save_address cannot be null');
        }
        $this->container['save_address'] = $save_address;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return string|null
     */
    public function getShipmentType(): ?string
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string|null $shipment_type Handelsware (SALE), Geschenk (GIFT), Warenmuster (SAMPLE), WarenrÃ¼cksendung (RETURN), Reparatur (REPAIR), Dokumente (DOCUMENTS)
     *
     * @return $this
     */
    public function setShipmentType(?string $shipment_type): static
    {
        if (is_null($shipment_type)) {
            throw new InvalidArgumentException('non-nullable shipment_type cannot be null');
        }
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!in_array($shipment_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_type', must be one of '%s'",
                    $shipment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber(): ?string
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber(?string $invoice_number): static
    {
        if (is_null($invoice_number)) {
            throw new InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        if ((mb_strlen($invoice_number) > 100)) {
            throw new InvalidArgumentException('invalid length for $invoice_number when calling UPSDataModel., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($invoice_number) < 1)) {
            throw new InvalidArgumentException('invalid length for $invoice_number when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets terms_of_shipment
     *
     * @return \kruegge82\shipstage\Model\TermsOfShipment|null
     */
    public function getTermsOfShipment(): ?\kruegge82\shipstage\Model\TermsOfShipment
    {
        return $this->container['terms_of_shipment'];
    }

    /**
     * Sets terms_of_shipment
     *
     * @param \kruegge82\shipstage\Model\TermsOfShipment|null $terms_of_shipment terms_of_shipment
     *
     * @return $this
     */
    public function setTermsOfShipment(?\kruegge82\shipstage\Model\TermsOfShipment $terms_of_shipment): static
    {
        if (is_null($terms_of_shipment)) {
            throw new InvalidArgumentException('non-nullable terms_of_shipment cannot be null');
        }
        $this->container['terms_of_shipment'] = $terms_of_shipment;

        return $this;
    }

    /**
     * Gets insurance_amount
     *
     * @return float|null
     */
    public function getInsuranceAmount(): ?float
    {
        return $this->container['insurance_amount'];
    }

    /**
     * Sets insurance_amount
     *
     * @param float|null $insurance_amount Value in EUR
     *
     * @return $this
     */
    public function setInsuranceAmount(?float $insurance_amount): static
    {
        if (is_null($insurance_amount)) {
            throw new InvalidArgumentException('non-nullable insurance_amount cannot be null');
        }

        if (($insurance_amount > 50000.0)) {
            throw new InvalidArgumentException('invalid value for $insurance_amount when calling UPSDataModel., must be smaller than or equal to 50000.0.');
        }
        if (($insurance_amount < 1.0)) {
            throw new InvalidArgumentException('invalid value for $insurance_amount when calling UPSDataModel., must be bigger than or equal to 1.0.');
        }

        $this->container['insurance_amount'] = $insurance_amount;

        return $this;
    }

    /**
     * Gets insurance_content
     *
     * @return string|null
     */
    public function getInsuranceContent(): ?string
    {
        return $this->container['insurance_content'];
    }

    /**
     * Sets insurance_content
     *
     * @param string|null $insurance_content insurance_content
     *
     * @return $this
     */
    public function setInsuranceContent(?string $insurance_content): static
    {
        if (is_null($insurance_content)) {
            throw new InvalidArgumentException('non-nullable insurance_content cannot be null');
        }
        if ((mb_strlen($insurance_content) > 100)) {
            throw new InvalidArgumentException('invalid length for $insurance_content when calling UPSDataModel., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($insurance_content) < 1)) {
            throw new InvalidArgumentException('invalid length for $insurance_content when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['insurance_content'] = $insurance_content;

        return $this;
    }

    /**
     * Gets insurance_used_item
     *
     * @return bool|null
     */
    public function getInsuranceUsedItem(): ?bool
    {
        return $this->container['insurance_used_item'];
    }

    /**
     * Sets insurance_used_item
     *
     * @param bool|null $insurance_used_item insurance_used_item
     *
     * @return $this
     */
    public function setInsuranceUsedItem(?bool $insurance_used_item): static
    {
        if (is_null($insurance_used_item)) {
            throw new InvalidArgumentException('non-nullable insurance_used_item cannot be null');
        }
        $this->container['insurance_used_item'] = $insurance_used_item;

        return $this;
    }

    /**
     * Gets cod_amount
     *
     * @return float|null
     */
    public function getCodAmount(): ?float
    {
        return $this->container['cod_amount'];
    }

    /**
     * Sets cod_amount
     *
     * @param float|null $cod_amount cod_amount
     *
     * @return $this
     */
    public function setCodAmount(?float $cod_amount): static
    {
        if (is_null($cod_amount)) {
            throw new InvalidArgumentException('non-nullable cod_amount cannot be null');
        }

        if (($cod_amount > 2500.0)) {
            throw new InvalidArgumentException('invalid value for $cod_amount when calling UPSDataModel., must be smaller than or equal to 2500.0.');
        }
        if (($cod_amount < 0.01)) {
            throw new InvalidArgumentException('invalid value for $cod_amount when calling UPSDataModel., must be bigger than or equal to 0.01.');
        }

        $this->container['cod_amount'] = $cod_amount;

        return $this;
    }

    /**
     * Gets cod_reason
     *
     * @return string|null
     */
    public function getCodReason(): ?string
    {
        return $this->container['cod_reason'];
    }

    /**
     * Sets cod_reason
     *
     * @param string|null $cod_reason cod_reason
     *
     * @return $this
     */
    public function setCodReason(?string $cod_reason): static
    {
        if (is_null($cod_reason)) {
            throw new InvalidArgumentException('non-nullable cod_reason cannot be null');
        }
        if ((mb_strlen($cod_reason) > 21)) {
            throw new InvalidArgumentException('invalid length for $cod_reason when calling UPSDataModel., must be smaller than or equal to 21.');
        }
        if ((mb_strlen($cod_reason) < 1)) {
            throw new InvalidArgumentException('invalid length for $cod_reason when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['cod_reason'] = $cod_reason;

        return $this;
    }

    /**
     * Gets is_b2c
     *
     * @return bool|null
     */
    public function getIsB2c(): ?bool
    {
        return $this->container['is_b2c'];
    }

    /**
     * Sets is_b2c
     *
     * @param bool|null $is_b2c Residential delivery service
     *
     * @return $this
     */
    public function setIsB2c(?bool $is_b2c): static
    {
        if (is_null($is_b2c)) {
            throw new InvalidArgumentException('non-nullable is_b2c cannot be null');
        }
        $this->container['is_b2c'] = $is_b2c;

        return $this;
    }

    /**
     * Gets is_saturday_delivery
     *
     * @return bool|null
     */
    public function getIsSaturdayDelivery(): ?bool
    {
        return $this->container['is_saturday_delivery'];
    }

    /**
     * Sets is_saturday_delivery
     *
     * @param bool|null $is_saturday_delivery Saturday Delivery
     *
     * @return $this
     */
    public function setIsSaturdayDelivery(?bool $is_saturday_delivery): static
    {
        if (is_null($is_saturday_delivery)) {
            throw new InvalidArgumentException('non-nullable is_saturday_delivery cannot be null');
        }
        $this->container['is_saturday_delivery'] = $is_saturday_delivery;

        return $this;
    }

    /**
     * Gets carbon_neutral
     *
     * @return bool|null
     */
    public function getCarbonNeutral(): ?bool
    {
        return $this->container['carbon_neutral'];
    }

    /**
     * Sets carbon_neutral
     *
     * @param bool|null $carbon_neutral UPS Carbon CO2-Neutral
     *
     * @return $this
     */
    public function setCarbonNeutral(?bool $carbon_neutral): static
    {
        if (is_null($carbon_neutral)) {
            throw new InvalidArgumentException('non-nullable carbon_neutral cannot be null');
        }
        $this->container['carbon_neutral'] = $carbon_neutral;

        return $this;
    }

    /**
     * Gets return_service
     *
     * @return bool|null
     */
    public function getReturnService(): ?bool
    {
        return $this->container['return_service'];
    }

    /**
     * Sets return_service
     *
     * @param bool|null $return_service Not compatible with other services
     *
     * @return $this
     */
    public function setReturnService(?bool $return_service): static
    {
        if (is_null($return_service)) {
            throw new InvalidArgumentException('non-nullable return_service cannot be null');
        }
        $this->container['return_service'] = $return_service;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference(): ?string
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return $this
     */
    public function setReference(?string $reference): static
    {
        if (is_null($reference)) {
            throw new InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 50)) {
            throw new InvalidArgumentException('invalid length for $reference when calling UPSDataModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($reference) < 1)) {
            throw new InvalidArgumentException('invalid length for $reference when calling UPSDataModel., must be bigger than or equal to 1.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


